#include <algorithm>
#include <bitset>
#include <cmath>
#include <ctime>
#include <iostream>
#include <list>
#include <map>
#include <math.h>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <stdio.h>
#include <string>
#include <vector>
#define rep(i,n) for(int i = 0; i < (n); i++)
#define all(a) a.begin(),a.end()
using namespace std;
using ll = long long;
using P = pair<int,int>;
using vi = vector<int>;
using vvi = vector<vi>;

int dx[] = {1,-1,0,0};
int dy[] = {0,0,1,-1};

template <typename T>
bool chmax(T &a, T &b) {
  if(a < b) {
    a = b;
    return true;
  }
  return false;
}

template <typename T>
bool chmin(T &a, T &b) {
  if(a > b) {
    a = b;
    return true;
  }
  return false;
}

template <typename T>
T gcd(T a, T b) {
  if(b == 0) return a;
  else return gcd(b,a%b);
}



int cans(bool f){
  if(f) cout << "Yes" << endl;
  else cout << "No" << endl;
  return 0;
}

// struct UnionFind {
//   vector<int> par;

//   UnionFind(int n) {
//     par.resize(n,-1); 
//   }

//   int root(int x) {
//     if(par[x] < 0) return x;
//     else return par[x] = root(par[x]);
//   }

//   bool issame(int x, int y) {
//     return root(x) == root(y);
//   }

//   bool merge(int x, int y) {
//     x = root(x); y = root(y);
//     if(x == y) return false;
//     if(par[x] > par[y]) swap(x,y);
//     par[x] += par[y];
//     par[y] = x;
//     return true;
//   }
  
//   int size(int x) {
//     return -par[root(x)];
//   }
// };
  
int main() {
  ll a,b,c,k;
  cin >> a >> b >> c >> k;
  if(a + b >= k) cout << min(a,k) << endl;
  else {
    ll rem = a + b - k;
    cout << a + rem << endl;
  }

    
}












